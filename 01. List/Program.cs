namespace _01._List
{
    internal class Program
    {
        // 배열은 크기가 유동적인 상황에 사용하기 힘들다 : 고정적인 크기로 사용할 경우 쓰는 것이 좋음

        /*******************************************************
        * 리스트 (List)
        * 
        * 런타임 중 크기를 확장할 수 있는 배열기반의 자료구조
        * 배열요소의 갯수를 특정할 수 없는 경우 사용이 용이 -> 배열의 단점 보완
        *******************************************************/

        // <리스트 구현>
        // 리스트는 배열기반의 자료구조이며, 배열은 크기를 변경할 수 없는 자료구조
        // 리스트는 동작 중 크기를 확장하기 위해 포함한 데이터보다 더욱 큰 배열을 사용 (용량을 일부러 더 크게 만들고 유동적으로 관리)
        //
        // 크기 = 3, 용량 = 8       크기 = 4, 용량 = 8       크기 = 5, 용량 = 8
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐        ┌─┬─┬─┬─┬─┬─┬─┬─┐        ┌─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│ │ │ │ │ │             │1│2│3│4│ │ │ │ │               │1│2│3│4│5│ │ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘        └─┴─┴─┴─┴─┴─┴─┴─┘        └─┴─┴─┴─┴─┴─┴─┴─┘


        // <리스트 삽입> : Add & Insert
        // 중간에 데이터를 추가하기 위해 이후 데이터들을 뒤로 밀어내고 삽입 진행
        //      ↓                        ↓                        ↓
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐        ┌─┬─┬─┬─┬─┬─┬─┬─┐        ┌─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│ │ │ │ │   =>        │1│2│ │3│4│ │ │ │   =>         │1│2│A│3│4│ │ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘        └─┴─┴─┴─┴─┴─┴─┴─┘        └─┴─┴─┴─┴─┴─┴─┴─┘


        // <리스트 삭제> : Remove & RemoveAt
        // 중간에 데이터를 삭제한 뒤 빈자리를 채우기 위해 이후 데이터들을 앞으로 당김
        //      ↓                        ↓
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐        ┌─┬─┬─┬─┬─┬─┬─┬─┐        ┌─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│A│3│4│ │ │ │   =>         │1│ 2│ │ 3│ 4│ │ │ │   =>    │1 │2 │3 │4 │ │ │ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘        └─┴─┴─┴─┴─┴─┴─┴─┘        └─┴─┴─┴─┴─┴─┴─┴─┘

        // <리스트 시간복잡도>
        // 접근    탐색     삽입     삭제
        // O(1)    O(n)    O(n)    O(n)


        // <리스트 용량> : 미리 용량을 설정해놓으면 불필요한 복사과정을 걸치지 않으므로 속도가 더 빠름
        // 용량을 가득 채운 상황에서 데이터를 추가하는 경우
        // 더 큰 용량의 배열을 새로 생성한 뒤 데이터를 복사하여 새로운 배열을 사용
        //
        // 1. 리스트가 가득찬 상황에서 새로운 데이터 추가 시도
        // 크기 = 8, 용량 = 8
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│6│7│8│ ← A 추가
        // └─┴─┴─┴─┴─┴─┴─┴─┘
        //
        // 2. 새로운 더 큰 배열 생성 (용량이 두배인 배열 새로 생성)
        // 크기 = 8, 용량 = 8          크기 = 0, 용량 = 16
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐           ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│6│7│8│ ← A 추가  │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘           └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
        //
        // 3. 새로운 배열에 기존의 데이터 복사 (새로운 배열에 복사해서 이사시킴)
        // 크기 = 8, 용량 = 8          크기 = 8, 용량 = 16
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐           ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│6│7│8│ ← A 추가  │1│2│3│4│5│6│7│8│ │ │ │ │ │ │ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘           └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
        //
        // 4. 기본 배열 대신 새로운 배열을 사용
        // 크기 = 8, 용량 = 16
        // ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│6│7│8│ │ │ │ │ │ │ │ │ ← A 추가
        // └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
        //
        // 5. 빈공간에 데이터 추가
        // 크기 = 9, 용량 = 16
        // ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│6│7│8│A│ │ │ │ │ │ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘


        static void Main(string[] args)
        {   // list의 기본적인 사용방법 : 다른 기능도 ㅈㄴ 많으니까 알아서 설명서 보셈

            List<string>list = new List<string>(); // 크기가 유동적으로 변하는 자료구조

            // 1. list에 데이터 추가 : 변수명.Add
            // +) 선호도 : Add > Insert
            // 왜? - 리스트의 구현원리를 알아야함 : inset는 뒤로 미뤄주는 과정이 필요해서 시간이 더 오래걸릶
            list.Add("0번째 데이터");  // 속도 : O(1)
            list.Add("1번째 데이터");  // Add할 때마다 배열의 크기가 늘어남
            list.Add("2번째 데이터");
            list.Add("3번째 데이터");
            list.Insert(1, "중간 데이터 1에 추가");  // 중간에 데이터 추가가 가능함 : 변수명.Insert (인덱스번호, 데이터값)
            list.Insert(3, "중간 데이터 3에 추가");  // 속도 : O(n)


            // 2. list에 있는 데이터 삭제 : 변수명.Remove / RemoveAt (없는 거 지운다고 하면 걍 개무시함)
            list.Remove("2번째 데이터");  // 삭제하면서 뒤에 있던 데이터들을 앞으로 당김 (빈 공간을 허용 X) - 배열 크기 축소
            list.RemoveAt(2);   // RemoveAt은 인덱스 번호로 데이터를 찾아 삭제함

            // 3. list에 있는 데이터에 접근
            list[0] = "수정된 0번 데이터";
            string text = list[2];

            for(int i=0; i<list.Count; i++)  //list는 길이 X, 갯수를 세는 느낌 = Count (배열은 길이임 그래서 Length 씀)
            {
                list[i]="asd";  //배열처럼 사용하면 됨
            }

            // 4. list에 있는 데이터 탐색 : 변수명.IndexOf(찾을 데이터값)
            int index = list.IndexOf("3번째 데이터");
        }
    }
}
